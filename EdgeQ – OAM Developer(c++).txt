EdgeQ – First Round Technical Interview

1. Insert a Node at Given Position in Linked List

struct Node {
    int data;
    Node* next;
};

void insertAtPosition(Node*& head, int data, int position) {
    Node* newNode = new Node{data, nullptr};

    if (position == 0) {
        newNode->next = head;
        head = newNode;
        return;
    }

    Node* temp = head;
    for (int i = 0; temp != nullptr && i < position - 1; i++) {
        temp = temp->next;
    }

    if (temp == nullptr) return;

    newNode->next = temp->next;
    temp->next = newNode;
}

2. What Was the Need of `delete` Keyword in the Code?

The `delete` keyword is used to deallocate memory allocated with `new`. Without it, memory will remain allocated, leading to a **memory leak**.

3. What is Memory Leak?

A memory leak occurs when a program allocates memory dynamically and fails to release it, causing gradual loss of available memory.

4. Polymorphism

Polymorphism allows one interface to be used for different underlying forms (data types).  
- **Compile-Time Polymorphism:** Function and operator overloading  
- **Run-Time Polymorphism:** Function overriding via virtual functions

5. Write Code to Show Compile-Time and Run-Time Polymorphism

class Shape {
public:
    virtual void draw() { cout << "Drawing shape" << endl; } // Run-time
    void draw(int x) { cout << "Drawing shape with size " << x << endl; } // Compile-time
};

class Circle : public Shape {
public:
    void draw() override { cout << "Drawing circle" << endl; }
};

int main() {
    Shape* s = new Circle();
    s->draw();        // Run-time polymorphism
    s->draw(10);      // Compile-time polymorphism
    delete s;
}

6. Why is `virtual` Keyword Written?

The `virtual` keyword is written to allow **dynamic binding** of a function, enabling run-time polymorphism so that the derived class's method is invoked through a base class pointer.

7. Is `override` Needed? Isn’t It Meant to Be Understood Implicitly?

Using `override` is **not mandatory**, but it is highly recommended. It ensures at compile-time that a method is actually overriding a virtual method in the base class. Without it, silent bugs can occur due to mismatched function signatures.

8. Constructor and Destructor Definition

Constructor: A special function automatically called when an object is created.  
Destructor: A special function automatically called when an object goes out of scope or is deleted.

Example:
class Test {
public:
    Test() { cout << "Constructor called" << endl; }
    ~Test() { cout << "Destructor called" << endl; }
};

9. How Constructor Destructor Behaves in Run-Time Polymorphism?

- Constructors are **not** polymorphic. Only the constructor of the base class is called if instantiated using a base class pointer.
- Destructors **should be virtual** in the base class; otherwise, derived class destructors won't be called when deleting via base class pointer.

Example:
class Base {
public:
    Base() { cout << "Base Constructor\n"; }
    virtual ~Base() { cout << "Base Destructor\n"; }
};

class Derived : public Base {
public:
    Derived() { cout << "Derived Constructor\n"; }
    ~Derived() { cout << "Derived Destructor\n"; }
};

int main() {
    Base* obj = new Derived();
    delete obj;
}

Output:
Base Constructor  
Derived Constructor  
Derived Destructor  
Base Destructor

10. When We Have Constructor of Base and Derived Class, What Will Be the Order of Calling?

When a derived class object is created:
- First, the **base class constructor** is called
- Then, the **derived class constructor**
- During destruction, the order is reversed:
  - Derived class destructor is called first
  - Then, base class destructor

This ensures proper construction and destruction of the inheritance hierarchy.
